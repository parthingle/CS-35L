W1 commands:

* man
* pwd, cd, ~, ., / etc
* dealing with files: mv, cp, rm, etc
* chmod All versions


W1 Sample Q:

If we want to assign the permission of execution to the file "hello" to the usrs who are members of this file group. Which of the following commnads :
A chmod ug+x hello
B chmod ug+r hello
C chmod o+x hello
D chmod 777 hello

Ans: (A and D)

W1 Editors in Linux:
Vim: Basic modes, how to submit, how to save, how to quit etc
Emacs: Print cheat sheet

Compiling and running in emacs (Just the knowledge from the homework)



W2:

Locale:
* Set of parameters that deine a user's cultural preferences
* Locale setting can afect program behaviour
Environemtn Variables:
* Variables that can be accessed from any child process
* common ones


Differences bw compiled and interpreted languages:
* different ways of understanding and executing programs
* examples

Standard Stream:
* stdin
* stdout
* stderr

** How does the locale affect the behaviour of the 'sort' command? Explain with sorting examples

Ans: Default sort order for the sort command depends on the setting of the environment variable LC_COLLATE: when its value is'C', it means sorting is in ASCII order; when its value is 'en_US', it means sorting is cae insensitive except when two strings are otherwise equal and one has uppercae letter earlier than the other:
For wxample, for two strings "bcde" and "Abcd". When LC_COLLATE = 'C', "Abcd" should be first, when LC_COLLATE='en_US', "bcde" should be first



** Regular Expresion:

Meaning of special characters:
* Quantification. eg. ?, *, +
* Grouping: eg. ()
* Alteration eg. [], |
* Anchors eg. ^, $

Operator and precedence:

Usage of sort, sed, and tr commands

Typers of Questions:
* Given the regex, describe the patten it matches and give an example
* MCQ: which of the following expression can match the given string


W2 Sample question:
Describe teh pattern represented by the following regular expression, give an example of string that can match it:

"^\(?[2-9][0-9]{2}\)?( |-|\.)[0-9]{3}(|-|\.)[0-9]{4}"

This regex matches 10-digit phone numbers, with three kinds of delimiter: none, -, . 
The first three digits(zone number) can be either with () or not. A zone number cannot start with 0 or 1.

ex: 2345678999, (234)5678999, 234-567-8999


Shell Scripting:
* characteristics of shell scripting
* Baisc grammar: variable, delimiter, accept argument from input, structure of program
* the branch statement: if-elif-else-fi
* The loop statement:
** for
** while and until

Sample question:

Write a shell script to comparre the values of two integers, Print "No 1> No2", "No.1 < No2." or "No 1 = No 2"

Ans: 

#/bin/bash
if test $1 -eq $1
then echo "No.1 = No.2"
elif test $1 -gt $2
then echo "No. 1 >No. 2"
else echo "No 1 <No 2"
fi



W3:

Build process:
* configure
* make
* make install


* utility for managing large oftware projects
* compiles files nd keeps them up to date
* efficient compilation (onnly files that need to be recompiled)
* why do we make at all?

(!!!)Question: Give simple program, write the makefile to compie it
** CFLAG
** Library
** object


Sample Question: write makefile for main.c util.c util.h where main.c has the main function:

Ans:
CFLAGS = -std=c++11

all: gogogo
   gcc CFLAGS -o gogogo util.o
util.o: util.c util.h
   gcc CFLAGS -c util.c
clean:
rm -f gogogo *.o


NOTE: gogogo is the executable file


Patching:

* a patch is a .diff file that shows the difference bw two files:

generation:   diff -u [original file] [patched file]
notations; --- +++ @@ l s + -


Pyton Language:
* object oriented language
* Compiled and interpreted* basic grammar of python
* the list, function , delimiter of python

Sample Question: given python program, write the output. (No need to write code in python)

Smape question:

Write the outpu:

def f(x, l=[]):
	for i in range (x):
		l.append(i*i)
	print l

f(2)
f(3, [3,2,1])
f(3)

Ans:
0 1
3 2 1 0 1 4
0 1 0 1 4      // The list l is unchanged from the time it was first initiated in the first call of f()
Note: Take note of the indentation in the program




W4:
* involves makeing a lot of changes to code
* software team has many people working on the same file

* track changes to the files related to the software


Terms:
* repository
* working copy
* check-out, check-in / commit
* HEAD
* branch, master

Commands:
* git init, git clone
* git checkout
* git add, git commit
* git status, git diff, git log, git show
* git clean

questions about terms:

* whats the difference bw a working opy and a repository?
* What is a commit? what should be in a commit? How many files should a commit contain?
* why bother having branches at all? why cn twe just take all work on the same single master branch?
* what happens when we perform a merge? How does it work?

Sample Question:

You are working on acode that is being tracked by GUT on your local machine. You just made some modiication to files (bar.c and bar.h) and also added a new header and a new soruce file (foo.h and foo.c). You haven't commited these changes yet.

1) How would you know the differnces between the the working copy of bar.c and bar.h, an their respective versions in a commit that was made just before the last commit (penultimate commit)? You cannot use commit hashes to refer to commits.
Ans: git status
	 git diff

2) How would you commit all the changes that you just made ot your code (bar.c bar.h, foo.c, foo.h)?
Ans: git add
	 git commit


	 Explain both these answers in detail.


W5:

* You should be able to develop a basic C program that incorporates the following:

Basic data types
control flow: if/else
pointerss
structs
dyanamic memory
basic i/o

Dynamic Memory

* memory that is allocated at runtime on the heap
* void *malloc(size_t size);
* void *realloc (void *ptr, size_t size);
* void free (void *ptr);


Sample Q:
You are required to allocate/deallocate memory to a 2D array using malloc() and free() functions. The sizes for the 2 dimensions are 100 and 200. Write C code that allocates memory using malloc(), followed by code to deallocate the sae memory using free(). The declaration of the 2-dim array is int **arr



Ans:

int r = 100, c=200;
int **arr = (int **)malloc(r * sizeof(int *));

for (int i=0; i<r; i++)
	arr[i] = (int *)malloc(c * sizeof(int));

for (int i =0 ; i < 100 ; i++){
	int * curPtr=arr[i];
	free(curPtr);
}

free(arr);





Debugging:

* debugger: a program that is used to run and debug other (target) programs
*  Kinds of bugs: 
** Segment fault: Program received signal SIGSEGV
*



* GDB:
Steps:
1) Compile using -c flag
2) specify the program to debug: gdb file <executable>
3) Run program: run [arguments]
4) In GDB interactive shell
5) exit gdb debugger


GDB Commands:
* Set Breakpoints
* Deleting, disable and ignore breakpoints
* Displaying data
* resuming execution after a break
* Jump out of the loop after a partial execution (as in jump out after 10 loop runs out of 100)



Analyzing stack info:

* A program is made up of one or more functions which interact be calling each other  
* Every time a functino i scalled, an area of memory is set aside for it. This area of memory is called a stack frame and holds the following crucial info:
** Storage space for all the local variables
** the memory address ot retuen to when the called function returns 
** the arguments, or paramteres, of the called functions

* each function cal gets its own


Sample Question:

Whic of the following informaition is stored in the stack at runtime:
A) Addresses of the local variables 
B) Memory address to return when the call ended
C) The arguments of the called function
D) the memory alocated be the malloc function

Ans: ABC






W6:

Processor Mode:

* User mode:**CPU restricted to unpriviledged instructions and a specified area of memory 

* Supervisor/kernel Mode
** CPU is unrestricted, can use all instructions, access all areas of memory and take over the CPU any tme

* Goals: protection of CPU, I/O

* Implementations: Hardare contains a mode bit


System Call:

* definitions
* Trap operations
* The steps of making a system call



Sample Question:

Which of the following statements is correct:

A) As the function of fopen() and open() is the same, they are actually the same function.
B) We ned the Trap operation both at the beginning and at the end of a system call.
C) During a sytem call, the kernel executes the syscall on behalf of the user process
D) The library functions will not make syscalls, so they are more efficient.

Ans: C

IMportant Concepts:

* syscall overhead:
** Understaf the meaning of sys, user and real time

* Library functions


* Buffered vs Unbuffered I/O
** Understand the mechanism of them
** Why different performance




Sample question:

* Please explaint he difference between unbuffered and buffered IO with the example of tr2b and tr2u

Ans:

Buffered: First look at the system buffer, if miss, then make system call to read from disk
Unbuffered: Directly make system call to read from disk, usually much slower

tr2b: getchar/putchar, tr2u: read/write. Explain the difference: the latter ones need to specify the file descriptor and address of buffer in order to directly make system call, which the former do not



W7:
Thread:
* difference bw process and thread
* the resources owned by a thread

Architecture:
 *Multiple Thread, and Multiple CPU


 For single CPU: Psuedo multithreading
 For multiple CPUL Real multithreading



 Sample Q:

 The folloi=wing statements are about the resource occupation in a multiple thread program. Which of them are correct?

 A) The stack is shared by threads, Each thread has its ouwn heap.
 B) Both the stach and heap are shared by the threads.
 C) The heap ais shared by threads. Each thread has






 Multiple thread programming:
 * Pthread API
 ** pthread_create
 ** pthread_join
 ** pthread_delet


 Thread safety:

 * Race condition: the output depends on the order of execution
 * synchroniation: Mutex
 ** Only one thread will get the mutex. Other thread will block in pthread_mutex_lock()
 ** Other thread can start execution only when the rhread that holds the mutex calls pthread_mutex_unlock()
 ** when a thread is locked, it needs to wait until other threads free the lock. Here it needs the function: pthread_cond_wait()
 ** when a threaf frees the lock, it needs t otell other programs that it is unlocked with thte function pthread_cond_broadcast()




thread safety example:

* Shared data changed by 2 threads

int balance =1000

** thread 1:
* T1 - read balance
* T1 - Deduct from balance
* T1 - update balance with new value

Thread 2:
* T2 - real balance





How to modify thre previous program to make it safe:

ANswer:
T1:
pthread_mutex_lock()
Read Balance
Deduct 50 from the balance
update balance with new value
pthread_mutex_unlock()

T2:
pthread_mutex_lock()
Read balance
add 150 to the balance
update balance with new value
pthrea_mutex_unlock()









W8;
Dynamic Linking:

** static Linking:
 Carried out only once to produce executable

 Dynamic:
 Allows a process to add, remove, replace, or relocate object modules during its execution


 ** Linking VS Loading : Collects procedures and links them object modules into one executable




 Pros:
 * Smaller files
 * access the lib files at runtime
 * avoid recompile all the programs when changes happen

 Cons:
 * Performance hit
 * Deal with missing libraries



 Sample Question:

 Explain the ssteps of dynamic linking:
 (See the figure in w8 lecture slides)



 W9:


 Requirement of communication over the internet:
 Confidnetiality
 data integrity
 Authentication
authoriation


Terms of cryptography:

plaintext
ciphertext
encryption




Symmetric- key encryption
asymmetric encryption
public-private key
digital signatire



Sample Wustion:

Alice and bob are collegues and you ned to send some secret documents. Alice wants to send Bob a file with signature, but also encrypted using public key encryptopns. In this process, which key would Alice use to encrypt a message?
Which key would Bob use a decrypt a message? Which key would Alice use to create the signature? And which key would Bob use to verify it?

Ans: Alice: encrypt using public key; create signature using private key
Bob: decrypt using the private key; verify the signature using the public key




Last tips:


* Review the log of each assignment, print cheat sheets
* Try to asnwerr every question to get partial redit
* Prepare well for the most commonly used commands in the assignments (find, diff, patch)
* For MCQs, all the question descriptions use plural form, but it doesn't mean that there must be more than one correct answer



