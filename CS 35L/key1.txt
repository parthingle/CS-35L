Excercise 1.1


1. emacs SP exer1.html Enter (Opens exer1.html in emacs editor)

2. C-s PUBLIC Enter (searches for keyword "PUBLIC")

3. C-s Laboratory Enter (searches for keyword "Laboratory")

4. C-s self-referential Enter (searches for keyword ("self-referential")

5. C-s arrow Enter (searches fo keyword "arrow")

6. C-e (moves cursor to the end of the line)

7. C-a (moves cursor to the beginning of the line)

8. I've avoided using arrow keys and instead used the respective commands to
search for "PUBLIC" or search for "arrow" or use commands C-e and C-a to move 
cursor to the end and beginning of the line.

9. No, I didn't. Using the arrow keys is counter productive when commands like 
C-s (to search) or C-a (to move to the beginning of the line) exist.

10. C-x C-c (Closes emacs and exits back to putty main screen)


Excercise 1.2


1. emacs SP exer2.html Enter (opens exer2.html)

2. C-s <!-- Enter C-a M-k M-k M-k M-k (Deleting 4 times because the ccomment is 4 lines long)

3. C-s "DELETEME" Enter C-a Enter M-k (First search for "DELETEME", move the cursor to the beginning of the line, then deleting the line)
 
4. M-< C-s en.wiki Enter  C-s en.wiki Enter C-a up M-k (Go to the beginning of the file,search for "en.wiki" -- the first instance is not the required comment, so search for "en.wiki" again. Once found, go to the beginning of the line, then go up a line, then delete the whole commesnt using M-k)

5. M-< C-s <!-- Enter



Exercise 1.3

1. emacs exer3.html Enter

2. C-s Assignement 1 Enter DEL 37 C-s Assignment 1 Enter DEL 37

3. M-% UTF-8 Enter y Enter US-ASCII Enter

4. M-< C-s </ol> Enter C-a Enter

5. C-x C-c y


Exercise 1.4

1. cat exer2.html exer2.diff >exer4.html Enter

2. emacs exer4.html Enter

3. M-> C-SP up (x3) up(x79) C-y

4. up(x7) C-sp up(x2) M-w up(x278) C-y M-> up (x14) C-SP up (x3) M-w M-< down (x16) C-y

5. M-> C-SP up(x14) C-w 

6. C-y

7. M-> C-SP up(x14) C-x C-;



Exercise 1.5

1. mkdir junk Enter

2. cd junk Enter emacs hello.c Enter (copy the text from the class website) RT CLK 

3. M-x compile Enter hello.o Enter

4. gcc -o hello-out hello.c Enter ./hello-out

5. #include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}



Exercise 1.6

1. C-x b Enter

2. (random) C-j

3. (setq x (random)) C-j (setq y (random)) C-j    ( x = -68004287355100208,  y = -540525411938347160)

4. (* x y) C-j (Answer = 921417568102661248 , which is obviously wrong)

5. M-: (* x y) Enter  (Answer = 921417568102661248, which is the same as the previous part)

6. The two numbers generated aren't truly random. They are generated using a certain seed value like the exact time. That 'seed value' is processed through an algorithm that generates the random number.

7.


